# Production Environment Variables (General)
# This file serves as a template for any production deployment
# Adapt based on your hosting provider (Render, Heroku, AWS, etc.)

# ===== SPOTIFY API CONFIGURATION =====

# Spotify App Credentials (required)
# Create app at: https://developer.spotify.com/dashboard
SPOTIFY_CLIENT_ID=your_spotify_client_id
SPOTIFY_CLIENT_SECRET=your_spotify_client_secret

# OAuth Redirect URI (must use HTTPS in production)
# Must match exactly with Spotify app settings
REDIRECT_URI=https://yourdomain.com/callback

# ===== FLASK CONFIGURATION =====

# Flask environment (required for production)
FLASK_ENV=production

# Flask secret key for sessions and encryption (required)
# Generate secure key: python -c "import secrets; print(secrets.token_hex(32))"
# CRITICAL: Keep this secret and rotate periodically
FLASK_SECRET_KEY=your_secure_secret_key_min_64_chars

# ===== SECURITY CONFIGURATION =====

# Enforce HTTPS (required for production)
HTTPS_ONLY=true

# Session cookie security (recommended defaults)
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=Lax

# Session timeout in seconds (default: 7200 = 2 hours)
PERMANENT_SESSION_LIFETIME=7200

# ===== SESSION STORAGE =====

# Session type (redis recommended for production)
# Options: redis, filesystem, mongodb, sqlalchemy
SESSION_TYPE=redis

# Redis configuration (if using Redis for sessions)
# Format: redis://[username:password@]hostname:port/db
# Examples:
#   Basic: redis://localhost:6379/0
#   With auth: redis://:password@hostname:6379/0
#   With TLS: rediss://hostname:6380/0
REDIS_URL=redis://your-redis-server:6379/0

# Redis connection settings (optional)
REDIS_MAX_CONNECTIONS=50
REDIS_SOCKET_CONNECT_TIMEOUT=5
REDIS_SOCKET_TIMEOUT=5
REDIS_RETRY_ON_TIMEOUT=true

# ===== DEPLOYMENT SPECIFIC =====

# Port configuration (often set by hosting provider)
# PORT=5000

# Worker/thread configuration (adjust based on server)
# WEB_CONCURRENCY=2
# GUNICORN_WORKERS=2
# GUNICORN_THREADS=4

# ===== MONITORING & LOGGING =====

# Logging level (INFO recommended for production)
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# External monitoring (optional)
# SENTRY_DSN=https://your-sentry-dsn
# NEW_RELIC_LICENSE_KEY=your-new-relic-key
# DATADOG_API_KEY=your-datadog-key

# ===== RATE LIMITING =====

# API rate limit configuration (optional)
# RATE_LIMIT_REQUESTS_PER_SECOND=3
# RATE_LIMIT_BURST_SIZE=10
# RATE_LIMIT_BACKOFF_FACTOR=2

# ===== DATABASE (if needed in future) =====

# Database URL (PostgreSQL example)
# DATABASE_URL=postgresql://user:password@host:port/database

# ===== CDN & STATIC FILES =====

# CDN configuration (optional)
# CDN_URL=https://cdn.yourdomain.com
# STATIC_URL=/static/

# ===== FEATURE FLAGS =====

# Enable/disable features (optional)
# ENABLE_ANALYTICS=true
# ENABLE_DEBUG_TOOLBAR=false
# MAINTENANCE_MODE=false

# ===== PRODUCTION CHECKLIST =====
#
# Security:
# [ ] Generate strong FLASK_SECRET_KEY (64+ characters)
# [ ] Enable HTTPS_ONLY
# [ ] Configure secure session cookies
# [ ] Set up Redis with password authentication
# [ ] Use Redis TLS if available
# [ ] Review and remove any debug settings
#
# Spotify API:
# [ ] Register production redirect URI in Spotify app
# [ ] Verify API credentials are correct
# [ ] Apply for Extended Quota Mode for >25 users
#
# Infrastructure:
# [ ] Set up Redis instance (managed service recommended)
# [ ] Configure health check monitoring
# [ ] Set up error tracking (Sentry, etc.)
# [ ] Configure log aggregation
# [ ] Set up SSL/TLS certificates
# [ ] Configure firewall rules
#
# Performance:
# [ ] Enable Redis connection pooling
# [ ] Configure appropriate worker counts
# [ ] Set up CDN for static assets
# [ ] Enable response compression
#
# Backup & Recovery:
# [ ] Document Redis backup strategy (if storing critical data)
# [ ] Plan for secret key rotation
# [ ] Document rollback procedures

# ===== IMPORTANT NOTES =====
#
# 1. NEVER commit this file with real values to version control
# 2. Use environment-specific secret management:
#    - Render: Environment Variables in dashboard
#    - Heroku: Config Vars
#    - AWS: Secrets Manager or Parameter Store
#    - Kubernetes: Secrets
# 3. Rotate FLASK_SECRET_KEY periodically (quarterly recommended)
# 4. Monitor Redis memory usage and set appropriate eviction policies
# 5. Use different Redis databases (0-15) for different environments
# 6. Consider Redis Sentinel or Cluster for high availability